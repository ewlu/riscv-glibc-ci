name: Build-Initial

on:
  workflow_call:
    inputs:
      patch_name:
        required: false
        type: string
      baseline_hash:
        required: true
        type: string
      patch_applied_glibchash:
        required: false
        type: string
      target:
        required: true
        type: string
      issue_num:
        required: true
        type: string
      test_comment_id:
        required: true
        type: string
      additional_info:
        required: true
        type: string
    outputs:
      glibcs: 
        value: ${{ jobs.build-target-linux.outputs.glibcs }}

jobs:
  build-target-linux:
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: riscv-gnu-toolchain
    steps:
      - uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/common/setup-env
        with:
          free_up_space: true

      - name: Check baseline
        id: not-baseline
        if: ${{ inputs.patch_name != '' && inputs.patch_applied_ != '' }}
        run: |
          echo "not_baseline=true" >> $GITHUB_OUTPUT

      - name: Effective hash
        id: ehash
        run: |
          if [ '${{ inputs.patch_applied_ }}' == '' ]; then
            echo "ehash=${{inputs.baseline_hash}}" >> $GITHUB_OUTPUT
          else
            echo "ehash=${{inputs.patch_applied_}}" >> $GITHUB_OUTPUT
          fi

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with: 
          name: glibc-sources-${{ inputs.baseline_hash }}
          path: ./riscv-gnu-toolchain

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc newlib qemu
          unzip cache.zip
          rm -rf cache.zip

      - name: Apply patches
        uses: ./.github/actions/extract-apply-patches-trunk-or-baseline
        if: ${{ steps.not-baseline.outputs.not_baseline == 'true' }}
        with:
          patch_name: ${{ inputs.patch_name }}
          baseline_hash: ${{ inputs.baseline_hash }}

      - name: Install dependencies
        run: |
          # sudo apt-get install autoconf automake autotools-dev curl python3 python3-pip libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev ninja-build git cmake libglib2.0-dev jq
          sudo apt install qemu-user-static -y

      - name: Build image
        id: mount-path
        run: |
          MOUNT_PATH=$(pwd)/glibc
          cd ../dockerfile
          docker build --platform linux/amd64/v3 . -t tester:latest
          echo "mount_path=$MOUNT_PATH" >> $GITHUB_OUTPUT

      - name: build glibc
        run: |
          cd ../dockerfile
          cp build_tests.sh ${{ steps.mount-path.outputs.mount_path }}
          docker run -d --name=runner --mount type=bind,source=${{ steps.mount-path.outputs.mount_path }},target=${{ steps.mount-path.outputs.mount_path }} -t tester:latest
          docker ps -a
          time docker exec runner ${{ steps.mount-path.outputs.mount_path }}/build_tests.sh ${{ steps.mount-path.outputs.mount_path }} ${{ inputs.target }}

      - name: Check build success
        id: build-status
        run: |
          cd ../dockerfile
          docker cp runner:$MOUNT_PATH/logs.tar.gz .
          tar xzvf logs.tar.gz
          ls logs
          cat logs/build.status
          if [[ $(cat logs/build.status) == 1 ]]; then
            echo "build_status=failure" >> $GITHUB_OUTPUT
          fi
          mv logs.tar.gz glibc-linux-${{ inputs.target }}-${{ steps.ehash.outputs.ehash }}-logs.tar.gz

      - name: test glibc
        if: ${{ steps.build-status.outputs.build_status != 'failure' }}
        run: |
          cd ../dockerfile
          cp run_tests.sh ${{ steps.mount-path.outputs.mount_path }}
          time docker exec runner ${{ steps.mount-path.outputs.mount_path }}/run_tests.sh ${{ steps.mount-path.outputs.mount_path }}

      - name: Check test success
        if: ${{ steps.build-status.outputs.build_status != 'failure' }}
        id: test-status
        run: |
          cd ../dockerfile
          docker cp runner:$MOUNT_PATH/logs.tar.gz .
          docker cp runner:$MOUNT_PATH/result.tar.gz .
          tar xzvf logs.tar.gz
          ls logs
          cat logs/build.status
          if [[ $(cat logs/test.status) == 1 ]]; then
            echo "test_status=failure" >> $GITHUB_OUTPUT
          fi
          mv logs.tar.gz glibc-linux-${{ inputs.target }}-${{ steps.ehash.outputs.ehash }}-logs.tar.gz
          mv result.tar.gz glibc-linux-${{ inputs.target }}-${{ steps.ehash.outputs.ehash }}-result.tar.gz

      - name: Upload log artifacts
        uses: actions/upload-artifact@v3
        with:
          name: glibc-linux-${{ inputs.target }}-${{ steps.ehash.outputs.ehash }}-logs
          path: |
            dockerfile/glibc-linux-${{ inputs.target }}-${{ steps.ehash.outputs.ehash }}-logs.tar.gz
          retention-days: 90

      - name: Upload result artifacts
        if: ${{ steps.test-status.outputs.test_status != 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: glibc-linux-${{ inputs.target }}-${{ steps.ehash.outputs.ehash }}-results
          path: |
            dockerfile/glibc-linux-${{ inputs.target }}-${{ steps.ehash.outputs.ehash }}-results.tar.gz
          retention-days: 90
      # - name: Make linux
      #   run: |
      #     cd build
      #     make linux -j $(nproc)

      # - name: Make qemu
      #   run: |
      #     cd build
      #     make stamps/build-qemu -j $(nproc)

      # - name: Output glibcs
      #   id: to-build
      #   run: |
      #     cd build
      #     TO_BUILD=$(ls --color=never -d build-glibc-linux-rv* | jq -R -s -c 'split("\n")[:-1]')
      #     echo $TO_BUILD
      #     echo "glibcs=$TO_BUILD" >> $GITHUB_OUTPUT

      # - name: Zip binaries
      #   run: |
      #     zip -r glibc-linux-rv64gcv-lp64d-${{ steps.ehash.outputs.ehash }}.zip build/bin

      # - name: Upload binary artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: glibc-linux-rv64gcv-lp64d-${{ steps.ehash.outputs.ehash }}
      #     path: |
      #       riscv-gnu-toolchain/glibc-linux-rv64gcv-lp64d-${{ steps.ehash.outputs.ehash }}.zip
      #     retention-days: 5

      # - name: Zip stage2
      #   shell: bash
      #   run: |
      #     zip --symlinks -r stage2.zip build

      # - name: Upload stage2 artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: glibc-linux-rv64gcv-lp64d-${{ steps.ehash.outputs.ehash }}-stage2
      #     path: |
      #       riscv-gnu-toolchain/stage2.zip
      #     retention-days: 5
    # outputs:
      # glibcs: ${{ steps.to-build.outputs.glibcs }}
